[[{"i":"welcome-to-conveyor","l":"Welcome to Conveyor!"},{"i":"what-is-conveyor","l":"What is Conveyor?","p":["Conveyor is a collection of protocols to automate the management of digital cryptocurrency assets for funds, DAO's, whales, and the every day trader. Conveyor specializes in bringing features that are typically available on centralized exchanges (CEX), to the decentralized (DeFi) world. This includes stop losses, take profits and automated trading strategies through on-chain logic, enabling a completely trust-less and decentralized system."]},{"i":"who-made-it","l":"Who made it?","p":["Conveyor Labs is the for-profit organization that is responsible for the deployment, maintenance, upgrading, and migration of Smart Contracts within the Conveyor Finance ecosystem. Conveyor Labs is owned and operated by DEXbot, a registered LLC in the state of Wyoming, USA."]},{"l":"Concept Overview","p":["There are two major parts to the Conveyor ecosystem. The COEX application and the on-chain smart contract. These two components work together to identify market conditions, validate on-chain LP values, and execute specified swaps autonomously for users of the system. Conveyor takes the centralization or custodial requirements out of swapping tokens so that institutional traders, investment DAOs, token developer teams, and retail traders donâ€™t need to constantly watch charts in anticipation of manually swapping when their desired market conditions are met."]}],[{"l":"Conveyor API Developer Docs","p":["The Conveyor API allows users to fetch optimal swap routes from one token to another along with executable transaction data. Currently Conveyor supports Ethereum, BSC, Polygon, Arbitrum, and Optimism."]},{"l":"Querying the API","p":["Endpoint: https://api.conveyor.finance"]},{"l":"Request Body","p":["Address of the receiver of tokenOut","Allowable % price impact on the transaction in Bips. Note: The API will use this % to set the amountOutMin in the calldata.","amountIn","Breakdown","chainId","Description","Example | Schema application/json","Name","Number","Number (optional)","recipient","referrer","slippage","String","String (Optional)","The address of the token being swapped into. Burn address if swapping Native asset on chain","The address of the token being swapped. Burn address if swapping Native asset on chain","The decimals of tokenIn","The decimals of tokenOut","The Network Id of the chain","The referralId in the ConveyorRouterV1 contract to be compensated 30% of the protocolFee on behalf of the swapper.","The total value being quoted on the tokenIn","tokenIn","tokenInDecimals","tokenOut","tokenOutDecimals","Type"]},{"l":"CURL"},{"l":"Response","p":["Example | Schema application/json","Code","Description","200","Successfully generated the transaction data","400","Failed to find a liquidity route for the swap"]},{"l":"Typescript Code Example"}],[{"l":"DEX Aggregator","p":["The Conveyor aggregator is currently compatible with all DEXs that conform to the Uniswap v2/v3 standard. This encompasses nearly every major DEX launched in the last few years, including Sushiswap, PancakeSwap, Camelot, Trader Joe, and several others. We plan to support several other DeFi protocols in the future including Curve, Balancer, Aave, etc."]},{"i":"why-use-conveyors-aggregator","l":"Why Use Conveyor's Aggregator?","p":["Other DEX's and aggregators utilize a specific smart contract called a Router that communicates between various liquidity pools for both single and multi LP interactions. While this does improve the likelyhood that a transaction will be successful, all of this processing is executed on-chain with multiple external contract calls and transfers in order to work.","With Conveyor, we construct all transaction calldata off-chain in a much more effective and cost-efficient manner, and pass the most favorable swap data back to the frontend for the trader to sign with their connected wallet.","This reduces unnecessary external calls or token transfers, which reduces the amount of on-chain processing needed to perform the swap, resulting in a much more gas efficient swap.","All calldata is send and received from our API, which syncs with all v2/v3 based pool for each chain Conveyor is deployed to."]},{"i":"how-other-dexsaggregators-handle-transactions","l":"How other DEX's/Aggregators handle transactions"},{"l":"How Conveyor handles transactions","p":["All of the calldata that the API returns to the frontend is easily verified before the transaction is signed so that the system is inherently trustless."]},{"l":"Contract Approval","p":["When performing any swap through any router, Contract approval is required in order for the swap to be successful. Conveyor has Swap Executor and Swap Aggregator contracts for each chain its deployed to."]}],[{"l":"Fee Structure","p":["Conveyor charges a fee based on how much gas we can save you when executing the swap. A fee of 50% of the gas savings is applied only when when gas saved 0.","For example, if a swap of ETH > USDC costs $20 through 1inch on Ethereum Mainnet and Conveyor provides the exact same swap outcome for only $10, a $5 worth of Ether fee is applied. This essentially provides a 25% gas discount to the trader for the same swap compared to 1inch.","The fee is paid via the msg.value of the submitted transaction data for Token <> Token swaps, and Token > ETH swaps. For Eth > token swaps, the protocol fee is added to the msg.value of the transaction amount, so a swap of 1 ETH > USDC with a .00015 protocol fee would have a msg.value of 1.00015 sent from the users wallet to execute the swap and pay the protocol fee."]},{"l":"How gas is calculated","p":["Both 1inch and Paraswap, our aggregator partners, return a gas estimation in their API response, along with the route data. After decoding their routes and reconstructing the swap calldata, we estimate gas on our end as well. This accuracy is further enhanced once you have given the ConveyorRouterV1 token approval for the quantity you want to swap, and is within +-200 gas (0.08% accuracy deviance) from the actual transaction once submitted."]}],[{"l":"Smart Contracts","p":["All our smart contracts have the same deterministic address, but we've broken down each chain to include links to our verified addresses","Contract Name","Contract Address","Etherscan Link","ConveyorRouterV1","0x3642189b7754302df84b6f3fe1ae34d2026647a7","Link","ConveyorMulticall","0x0f98Dd99A444E100E56B56D4B99c8b623C091B2f","Polygonscan link","BscScan Link","Arbiscan Link"]}]]