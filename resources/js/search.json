[[{"i":"welcome-to-conveyor-finance","l":"Welcome to Conveyor Finance!"},{"i":"what-is-conveyor","l":"What is Conveyor?","p":["Conveyor is a collection of protocols to automate the management of digital cryptocurrency assets for funds, DAO's, whales, and the every day trader. Conveyor specializes in bringing features that are typically available on centralized exchanges (CEX), to the decentralized (DeFi) world. This includes stop losses, take profits and automated trading strategies through on-chain logic, enabling a completely trust-less and decentralized system."]},{"i":"who-made-it","l":"Who made it?","p":["Conveyor Labs is the for-profit organization that is responsible for the deployment, maintenance, upgrading, and migration of Smart Contracts within the Conveyor Finance ecosystem. Conveyor Labs is owned and operated by DEXbot, a registered LLC in the state of Wyoming, USA."]},{"l":"Concept Overview","p":["There are two major parts to the Conveyor ecosystem. The COEX application and the on-chain smart contract. These two components work together to identify market conditions, validate on-chain LP values, and execute specified swaps autonomously for users of the system. Conveyor takes the centralization or custodial requirements out of swapping tokens so that institutional traders, investment DAOs, token developer teams, and retail traders donâ€™t need to constantly watch charts in anticipation of manually swapping when their desired market conditions are met."]}],[{"i":"100-decentralized","l":"100% Decentralized","p":["Decentralization is a crucial component in DeFi protocols in order to shift the control of a system from one main group (Conveyor Finance) to a system completely controlled by the general public. This gives more power to the individuals by offering a reproducible, predictable, and verifiable method to ensure funds are stored, transacted, and automated in the most efficient and safest way possible.","Conveyor Finance has zero centralized components throughout the process of storing, automating, or transacting tokens for users of our platform. We believe that the foundation of DeFi and any of its systems should not be controlled by any single entity or group of entities. Rather, it should be controlled and operated by the public through verifiable on-chain processes and execution."]}],[{"i":"100-non-custodial","l":"100% Non-Custodial","p":["There are a few protocols on the market that provide automation for your tokens, but of those, many require you to send your assets to a shared contract in order to automate your trades.","Due to these design decisions, tokens that implement a tax on transfer events (tokenomics) are discouraged from using these services. The primary reasons are twofold","Double-tax events","Likelyhood of lost funds"]},{"l":"Double-Tax Events","p":["Due to the requirement for a user to send their tokens to a shared contract, they impose a first transfer tax event on sending thier assets to the shared contract in order to automate their future swap.","Those tokens are taxed a second time when the order is executed."]},{"l":"Custodial Automation Providers","p":["A User wants to automate token A totaling 100 tokens. Token A has a 10% tax on transfer events. When the user transfers 100 Tokens to the Automation Contract, the Automation contract receives 10% less 100 tokens - 10% = 90 tokens","When the trade conditions have been satisfied, an external caller calls the Automation contract to swap the remaining 90 tokens to the Liquidity pool, incurring another 10% transfer tax.","The resulting value is a swap of 90 tokens - 10% = 81 tokens swapped for the output token","With Conveyor Finance, the automated swap starts and ends with the users wallet. This means that the only transfer tax event is when the users wallet interacts directly with the LP","A User wants to automate token A totaling 100 tokens. Token A has a 10% tax on transfer events.","When the trade conditions have been satisfied, an external caller calls the the Conveyor contract to do a transferFrom the users wallet to swap 100 tokens to the Liquidity pool, incurring a single 10% transfer tax event.","The resulting value is a swap of 100 tokens - 10% = 90 tokens swapped for the output token"]}],[{"i":"100-trustless","l":"100% Trustless","p":["Conveyor does not have trusted executors to automate trades. All orders are automated via off-chain bots called COEX's (Conveyor off-chain executors). To learn more about COEX's, head over to our coex section"]}],[{"l":"Limits"},{"l":"Sandbox Limit Orders","p":["Sandbox Limit Orders are a new type of order introduced by Conveyor, allowing a limit orders to be filled faster, more profitably and without any restrictions on how the order is filled. Unlike stoplosses, Sandbox limit orders have complete freedom in how they can be filled, as long as the exact market price specified by the order is met. During sandbox order execution, the contract optimistically transfers the order's amountIn, allowing the exectuor to utilize the liquidity in any way to fill the order."]},{"l":"How Sandbox Limit Orders Work","p":["To demonstrate how Sandbox limit orders work, lets say that there is a Sandbox order to swap 1 WETH for 1500 USDC. Let's walk through a few ways that this order can fill.","Since sandbox orders are not bound by any DEX, if there is a newly launched DEX with an LP that meets the exchange rate of the order, the offchain executor can route this order through this pool.","Another way that this order can fill is through peer to peer (p2p) transfers. Lets say that there is another sandbox order waiting to execute, looking to swap 1500 USDC for 1 WETH. The offchain-executor could use the first order to fill the second order, initiating a p2p swap between the two users.","There are also some more exotic ways to fill orders.","Lets say that there is another limit order protocol on the blockchain and they have an active limit order to swap 1500 USDC for 1 WETH. Since the sandbox order's amountIn is transferred optimisitcally, the offchain-executor could create a new limit order on the other protocol, fill the limit order, receiving 1500 USDC and fill the sandbox limit order with the profit, all in one atomic transaction.","Due to the fact that Sandbox orders have no restrictions on how they can fill, orders have the possibility to fill faster and more profitably than current market conditions. Offchain-executors can monitor the chain to close MEV opportunities, and use that profit to fill orders.","Lets use the original example order above, swapping 1 WETH for 1500 USDC to demonstrate this. If current market conditions show that the best exchange rate is 1495 USDC per 1 WETH, but there is an arbitrage opportuntity that would change the price to 1500 USDC per 1 WETH, the off-chain executor could use the order's amountIn(and any other means of liquidity) to close the arbitrage opportunity and fill the sandbox order, all in one atomic transaction. While other traders see the price to be 1495 USDC per 1 WETH, the sandbox limit order filled at 1500 USDC per 1 WETH.","This opens a wide variety of exciting and synergistic possibilites for both traders and MEV searchers alike.","MEV searchers could monitor liquidations, arbitrage opportunties, and any other means of MEV to fill orders. This can also create a cascading affect, where closing an arbitrage opportunity allows the executor to fill a large order, which creates another arbitrage opportunity and so on until all opportunities are exhausted.","Within any of the simplistic or exotic exapmles above, if the full amount can not be filled, the off-chain executor can also partially fill an order as long as they are receiving the order's specified exchange rate for the amount they are paritially filling."]},{"l":"How to Place Sandbox Limit Orders","p":["Placing a sandbox limit order is very similar to placing a stoploss order. To place a sandbox order, head over to the limit order interface and select the tokenIn& tokenOut from the drop down selector. Then, enter the exactAmountIn of tokens you would like to trade and the exactAmountReceived. The ratio of the exactAmountIn/exactAmountReceived defines the price that the sandbox order will fill at. If this is your first time placing an order on the tokenIn with Conveyor, you will be asked to give the SandboxLimitOrderExecutor approval. This will only be required once.","Just like stoploss orders, the execution credit will autofill with a reccomendation based on the current gas price conditions. If you skipped the stoploss section or want to learn more about execution credits, you can click here. Note that if your order does not have enough credits to cover the gas cost of execution, off-chain executors might not fill the order when expected. It is highly recommended that users do not use less than the front end's recommendation.","In addition to the previously mentioned order settings, you can also set an order expiration timestamp, order slippage and an optional token tax. You are able to set any expiration timestamp for your order, however if no value is supplied, the expiration time will default to 30 days. Note that if you set an expiration time over 30 days, there will be a small fee (0.002 ETH) to refresh your order on every 30 day interval. This fee will be decremented from the execution credits deposited with the order so make sure to account for this when placing orders with extended expiration."]},{"i":"how-to-updatecancel-an-order","l":"How To Update/Cancel an Order","p":["Just like stoploss orders, you can to modify the price, amountIn, and executionCredits of any active sandbox order. Additionally, you can cancel the order, removing it from the contract. To cancel or update an order, navigate to the Orders tab and select the dropdown on the order you wish to modify as seen below."]},{"l":"Viewing Current and Completed Orders","p":["To view any active or filled orders, head over to the Orders section in the navigation bar. All active orders will be listed under the Current Orders tab, while all completed orders will be listed under the Completed Orders tab. If an order has been successfully filled there will be a green Filled label listed as the order's status.","Note that since sandbox orders can leverage MEV to fill orders, your order may execute at its specified price while a chart shows a lower price, however in this case, you are just filling at a better price than the chart shows! Your order will always fill at the specified execution price.","Similarly, since sandbox orders require that the order will receive the exact amount out specified for the amount in, it is possible that while a chart may say the execution price is met, the amount out received is actually less due to fees on the swap. The swap will execute once the exact amount out can be achieved."]}],[{"l":"Stoplosses"},{"l":"Stoploss Orders","p":["Conveyor Finance offers fully decentralized and non-custodial stoploss orders. If you are unfamiliar with how stoploss works, you can follow this link to learn more.","Unlike centralized exchanges where stoplosses execute on a centralized orderbook, stoplosses through Conveyor are filled at market price across any of the available decentralized exchanges (DEXs) that Conveyor supports.","The DEXs supported for stops on each chain all have at least 500M in liquidity and are reputable exchanges that have stood the test of time (UniswapV2, UniswapV3, Sushiswap, etc). To find a full list of the DEXs that are supported for stop losses for any chain Conveyor is deployed to, click here."]},{"l":"How Stoploss Orders Work","p":["Off-chain executors are monitoring market conditions 24/7, ready to execute a limit order when any DEX meets the execution price. When an order reaches market price, an executor will call the executeLimitOrders function and pass in the orderId for the order. From there, the contract trustlessly verifies that the market conditions meet the order's execution price and fills the order on the most advantageous liquidity pool at the time of execution. The amount out less fees is then sent directly to the order owner's wallet. The result is a fully decentralized and trustless stoploss execution, without having to ever worry about the tokens leaving your wallet. Since all liquidity pool prices are verified on-chain, the gas cost of stoplosses is higher than a typical swap on a DEX."]},{"l":"How to Place Stoploss Orders","p":["To place a stoploss order, head over to the stoploss interface and select the tokenIn& tokenOut from the drop down selector. Then, enter the quantity of tokens you would like to trade and the stop price, signifying the price that the stoploss should trigger at. If this is your first time placing an order on the tokenIn with Conveyor, you will be asked to give the LimitOrderExecutor approval. This will only be required once. The execution credit amount of the order will autofill a reccomendation. Although there is no required amount, a sufficient execution credit will ensure fufillment at execution time as this is used to compensate the off-chain executor the gas spent on the traders behalf. To compensate the gas spent by the off-chain executors when filling your order, execution credits are should be deposited. Simply put, execution credits is ETH attached to your order and paid to the executor upon fufillment. The front end will recommend an amount of execution credits for your order based on the current gas prices across the network. However, you are able to deposit more or less than the recommended amount. Note that if your order does not have enough credits to cover the gas cost of execution, off-chain executors might not fill the order when expected. It is highly recommended that users do not use less than the front end's recommendation.","In addition to the previously mentioned order settings, you can also set an order expiration timestamp, order slippage and an optional token tax. You are able to set any expiration timestamp for your order, however if no value is supplied, the expiration time will default to 30 days. Note that if you set an expiration time over 30 days, there will be a small fee (0.002 ETH) to refresh your order on every 30 day interval. This fee will be decremented from the execution credits deposited with the order so make sure to account for this when placing orders with extended expiration."]},{"i":"how-to-updatecancel-an-order","l":"How To Update/Cancel an Order","p":["After placing a stoploss order, you have the ability to modify the price, amountIn, and executionCredits of the order as well as the ability to cancel the order, removing it from the contract. To cancel or update an order, navigate to the Orders tab and select the dropdown on the order you wish to modify as seen below."]},{"l":"Viewing Current and Completed Orders","p":["To view any active or filled orders, head over to the Orders section in the navigation bar. All active orders will be listed under the Current Orders tab, while all completed orders will be listed under the Completed Orders tab. If an order has been successfully filled there will be a green Filled label listed as the order's status."]}],[{"l":"Execution Credits"},{"l":"Execution Credits","p":["Off-chain executors are constantly monitoring on chain conditions in order to fill orders placed through Conveyor. When an order is able to execute, the off-chain executor calls the executeOrders function on one of the execution contracts, resulting in the order being filled. This requires the off-chain executor to incur gas cost for execution. To insure incentivization at all times for the off-chain executor to fill orders, execution credits, paid in ETH(or the native token of the network) are deposited with each order. This creates a constant incentive for executors to be competitive and fill orders as quickly as possible. Competition amongst the executor network constantly raises the bar towards faster and more profitable execution for traders.","When placing an order through the frontend, the recommended execution credit will autofill. You are able to deposit more or less than the recommended amount. Note that if your order does not have enough credits to cover the gas cost of execution, off-chain executors might not fill the order when expected. It is highly recommended that users do not use less than the front end's recommendation.","Upon successful execution, the execution credits for that order are sent to the off-chain executor. If a user chooses to cancel an order, all execution credits will be returned to the order owner."]}],[{"l":"Fee Structure"},{"i":"base-fee-motivationoverview","l":"Base Fee Motivation/Overview","p":["The base user fee for autonomous trade execution by the COEX network is a dynamic price curve ranging from 0.5%-0.1% of the user's total transaction size. This fee is used to compensate the COEX for the execution of the transaction on the user's behalf. The base free shrinks at a proportional rate to the size of the transaction meaning smaller transactions will be closer to 0.5% while large transactions will dynamically approach 0.1%. This fee is chosen to facilitate a fair and thriving ecosystem that is overall beneficial to our userbase and the COEX network as a whole.","The base fee is used to compensate the COEX for executing the transactions on the user's behalf. The fee is modeled after a modified logistic function. Formally our fee structure is based on the calculation below:","â€‹This function is mathematically capped at a .5% base fee, which dynamically decreases down to a minimum of 0.1%. The benefits of a constant function allow for higher gas optimizations by reducing conditionals in the contract by means of a stepper system. Fees are calculated by the post-swap value, rather than the pre-swap value. This is to account for possible tokenomic tax many DeFi tokens implement. A visual representation of the above formula can be seen below:","X axis = USD value of the single trade / Y axis indicates the fee % associated with the given trade value","Additional benefits of the above curve compared to a direct line of decreasing fees are threefold:","To maximize revenue for further development of current and future Conveyor protocols","Provide an immediate incentive for users to transact higher valued trades for reduced fees","Maintain a scalable, fair fee structure for institutional traders with higher USD value trades","Examples of trade fees proportional to trade value can be seen below:","Column x references the USD value of the trade for each transaction while the f(x) column references the trade % in relation to its respective trade value.","The third column is a calculation of trade value * fee % to indicate the USD fee value associated with that trade"]},{"l":"Examples","p":["A $1000 trade will have a 0.49% fee = ~$5 A $100,000 trade will have a 0.27% fee = ~$278 A $500,000 trade will have a 0.10% fee = ~$506"]},{"l":"COEX Reward","p":["A subtle, but integral aspect of our fee structure that was chosen with regards to overall protocol security is the COEX reward. The COEX reward is critically important when considering the possibility of flash loan attacks on the liquidity pools through which the COEX will be executing the transactions. Since the COEX will have visibility over the pending transactions in the queue and know the execution prices of these transactions, it is important to have a mechanistic way of protecting our user base from bad actors in the COEX network. We want to ensure a fair COEX reward for execution while concurrently guaranteeing our user's protection from the possibility of COEXs executing profitable flash loan attacks on liquidity pools to manipulate the spot price to reap the rewards of execution. The COEX reward regarding the fee has been rigorously determined based on principles of conservation functions used in the liquidity pools our users will be interacting with. In order to determine the optimal COEX reward we formulated objective models on the price impact in liquidity pools based on transaction size, formally we determined the relationship between large swap transactions in correspondence with reserve size to determine a formal model of the potential exploitability of the Conveyor Contract from bad actor COEXs on our user base. By analytically determining the relationship between swap size and price impact based on reserve size in the liquidity pools we are able to in real-time calculate the exact threshold amount that a COEX could receive in one execution reward that would make such an attack profitable on the basis of price manipulation in the liquidity pool. We ensure to our user base the unprofitability of such attacks by putting a hard cap on the COEX reward that can be received in one execution to facilitate an ecosystem that rewards playing by the rules."]},{"l":"COEX Reward vs. Conveyor Fee","p":["A user will always pay a fee based on the logistic curve above for each transaction completed. The fee a user pays is split between Conveyor Labs and the COEX, and is broken down into a sub curve to know exactly which values should be paid to each party.","For lower value TX's that have a higher-tiered fee ($100 trade for example), the ~ 0.5% fee is split 70% Conveyor Labs/ 30% COEX","For higher value TX's that have a lower-tiered fee ($500,000 trade for example), the ~ 0.1% fee is split 30% Conveyor Labs/ 70% COEX","This fee structure is ideal in that It's not only gas efficient, but lower value TX's offers Conveyor Labs a higher revenue stream while larger transactions offer larger rewards to the COEX. This higher fee paid to the COEX at higher values offers an increased financial incentive that strengthens the COEX network and entices others to spin up a COEX themselves for a chance of receiving a large reward.","The Below graph illustrates the % of the user fee split between the COEX operator who successfully confirms the transaction, and the Conveyor Labs fee","Purple = User Fee - Orange = Conveyor's Share - Green = COEXs Share","The above graph implements the following fee calculation reserved for Conveyor Labs - Orange","and the fee structure reserved for the COEX that successfully executed the transaction - Green","When both the orange and green logistic curves are combined, they result in the purple line, which is the total fee the user pays once their order is executed. The benefit of implementing a crossover in reward allocation is that COEXs who confirm higher value transactions receive a higher proportion of the fee, while lower transactions benefit Conveyor Labs for future developments of the ecosystem. Custom COEX applications can be custom developed by software developers that only focus on higher-value transactions, while other COEX applications can be focused on smaller, more frequent trades. The end result is a fee structure where lower volume trades benefit the growth of Conveyor Labs -- and in turn its ecosystem -- while higher volume trades benefit the growth of the COEX network responsible for automating the Conveyor ecosystem.","The Desmos graph that plots the above functions and graphs can be seen via this Desmos link."]}],[{"l":"Risk Mititgation","p":["Several implementations and design decisions were made to create a system that benefits users of the protocols, as well as those who host an off-chain COEX application."]},{"l":"Flash Loan Attacks","p":["Flash loan attacks on our user base pose a significant threat to the protocol by bad actors in the COEX network. Traditional DeFi automation networks such as The Gelato Network have an internal executor network to call the execution functions of the on-chain logic. The Conveyor COEX network is completely democratized, allowing anyone to spin up a COEX client and start executing incoming orders in the queue. The reason why most other well-known DeFi automation protocols keep their executor network internal is because of the risk of bad actors in the COEX network. Since the COEX network will be reaping the rewards of execution on the transactions in the queue, it is possible for a COEX to manipulate the spot price in a liquidity pool to drive the price to the execution trigger for a batch of transactions to execute, in such cases where the execution reward is significantly large.","The Conveyor protocol has deeply analyzed this problem, and mathematically formulated a model on when such an attack will be profitable. Our protocol's COEX reward is analytically determined with flash loan attacks in mind and is hard-capped at the exact value that would make such an attack profitable. Meaning, a COEX could take out a flash loan to manipulate the price of an lp to the execution trigger for a batch of transactions and at best will be breaking even - the gas accumulated in the transaction. Alternatively, the COEX could simply play by the rules and reap the max execution reward getting a net-positive return.","The overall philosophy of the Conveyor protocol has been to mechanistically design the system in such a way that the most profitable way to use the platform is also the correct way to use the platform, and flash loan attack prevention has been mechanistically designed into the system to be unprofitable so attempting such attacks will invariably lose money for bad actors in the network."]},{"l":"Contract Security","p":["The conveyor contract has been designed with security as the top priority. Our engineers have designed a custom EOA library to further strengthen the security of our execution function from external contract calls. This library protects against sophisticated ghost contract calls which several modern protocols which only check the code size of the caller are still vulnerable to. The Conveyor contract will be audited by QuantStamp prior to our protocol launch to ensure a deep level of security and professional oversight to our userbase.","Although we have made deep mechanistic design decisions to prevent flash loan attacks on the liquidity pools to trigger order executions. We further implement price oracles as secondary price indicators alongside the liquidity pool spot prices based on reserve size. This is to have redundancy in our execution price triggers in order to prevent execution on a manipulated spot price in a liquidity pool. For example, if a user on our platform places a limit sell order and a bad actor takes out a flash loan in the respective lp to depreciate the spot price to the execution trigger. Our contract will not execute as the oracle price will conflict with the liquidity pool price. So, our userbase can feel safer when trading in volatile liquidity pools that their orders will not execute on atomic manipulated price data in the liquidity pools."]}],[{"l":"Smart Contracts"},{"l":"Ethereum","p":["Contract Name","Contract Address","Conveyor Executor","0x91AE75251Bc0c6654EF0B327D190877B49b21A2E","Limit Order Router","0xCd1BA99aF51CcFcffdEa7F466D6A8D5AF81c5e6E","Sandbox Limit Order Book","0x0c9C4CC14E0C487ef44fA23630A69A06b8b75A91","Sandbox Limit Order Router","0x6d53e6b2c079a98fC0F736dFdE348278FDc91629","Limit Order Quoter","0xb663b9804540539c956aeFFf64bAfC19aDbc5e23","Conveyor Swap Aggregator","0x6DBEd6b5aeD3b4CD0A0B72c6E3ee7583C1205835"]},{"l":"BNB Chain","p":["Contract Name","Contract Address","Conveyor Executor","0x902c9e3202F5191db0B6edF5c038F4941Dfd6641","Limit Order Router","0x400966bC4ab862C2094d6d749DB0C42b66605F4A","Sandbox Limit Order Book","0x4dCdBa96dc7244baa763eC51Ca0dBcDddBCee4e7","Sandbox Limit Order Router","0x456f041CA2f3964bD07AB9FE20e2A0607F04615C","Limit Order Quoter","0xB5d29EbE6AEA9c39027FA2d2981c816E21356362","Conveyor Swap Aggregator","0x7bfd65463747A2B375a6C376761d054840f49e7D"]},{"l":"Polygon","p":["Contract Name","Contract Address","Conveyor Executor","0x6d53e6b2c079a98fC0F736dFdE348278FDc91629","Limit Order Router","0xDe160A8fb9eB7bd2309E5470D9F0dB3Fc6C99E78","Sandbox Limit Order Book","0x87b6Ba07aAB69AF8f91cc7372bBF589e28F5219d","Sandbox Limit Order Router","0xe56B8CF0aB1865Dd0C9A1c81C076D2843Eb90B97","Limit Order Quoter","0x0c9C4CC14E0C487ef44fA23630A69A06b8b75A91","Conveyor Swap Aggregator","0x2620430fe83D963AE3063faD3EAEeeaDe9262dFF"]},{"l":"Arbitrum","p":["Contract Name","Contract Address","Conveyor Executor","0xe56B8CF0aB1865Dd0C9A1c81C076D2843Eb90B97","Limit Order Router","0xf88F7Ebba40674Ce4364a048f6A72367979B7274","Sandbox Limit Order Book","0xAAb2e639AaacE78047990B621aD939d4D73680De","Sandbox Limit Order Router","0xb463F64b4C9cff579b9C2935b702536764F7F8c6","Limit Order Quoter","0x87b6Ba07aAB69AF8f91cc7372bBF589e28F5219d","Conveyor Swap Aggregator","0x42538b6BF267646a9dD32789D526386666a6765B"]}],[{"l":"The COEX Network"},{"l":"Overview","p":["Conveyor Finance is innovating DeFi automation in that the on-chain functions that execute users' automated swaps are publicly callable by anyone. There are no owner-only functions or allow-listed requirements in order to execute swaps for others. With this approach, a great deal of security and verifiability is required to prevent bad actors from abusing the system, which Conveyor Finance has gone to a great extent to prevent.","The COEX is a decentralized, open-source, and highly optimized program that acts as the backbone of the Conveyor ecosystem. Each COEX in the network monitors on-chain state changes in Conveyor contracts, receiving a reward for each transaction that it successfully completes. The Conveyor ecosystem is fully permissionless, meaning that COEXs compete amongst each other to execute transactions faster than their peers, which ensures that orders are guaranteed and executed as fast as possible. Through the COEX network, Conveyor is able to enable trustless, fully decentralized contract automation for decentralized finance.","The COEX interacts with the public functions of our protocols in order to execute automated swap transactions for our users. COEX operators (those who execute swap transactions for our users) are able to listen to the public swap conditions that users of Conveyor Finance have stored on-chain, and interact with the functions of the smart contract to initiate the swap of users' assets when specific, verifiable conditions are met."]},{"l":"How it works","p":["The COEX works by listening to on-chain state changes in the Conveyor Limit Order contract to keep track of all existing limit orders. Simultaneously, the COEX listens to corresponding liquidity pools to keep track of price changes and know when to execute a limit order. All order execution is verified on-chain, meaning that a limit order will only execute when the price, order quantity, and all other necessary conditions are met on chain (conditions for order execution are discussed in detail in the Limit Orders section of the whitepaper). COEXs listen for events emitted from the Limit Order contract to update their local state whenever any order is placed, updated, canceled, or executed. When an active limit order hits its execution price, COEXs race to call the contract, with a reward going to the COEX that successfully completes the transaction. This creates a financial incentive to support the Conveyor system, which ensures competition throughout the COEX network. This competition creates a strong COEX network, ensuring that limit orders are executed as fast as possible."]},{"l":"Accessibility","p":["The COEX is fully open-sourced, compact, and extremely easy to install. Accessibility strengthens decentralization, and we wanted the COEX to be accessible to anyone. While some protocols that offer automation either close source their off-chain logic or centralize their protocol so that only trusted nodes can call their contract, we decided to design the system in a way that the more COEXs there are, the stronger the network becomes. Downloading the COEX is as easy as one command in the terminal and setup takes less than 5 minutes.","The COEX is built in GoLang and is compatible with almost any operating system/architecture. Additionally, you can supply any RPC endpoint to the COEX. One point to note is that the COEX network is competitive, so having a computer with higher performance as well as a local node will give a COEX operator the greatest advantage.","Running a COEX Instructions on how to download/run a COEX are coming soon."]}],[{"l":"Roadmap"},{"i":"may-2022---june-2022","l":"May 2022 - June 2022","p":["Build limit order & stop-loss contracts","Build the COEX v0.1","Build the Conveyor frontend interface, enabling users to interact with the limit order and stop-loss contracts.","Continue building relationships with everyday traders, investment DAO's, Institutuional traders, and Token Teams who are ready to transact on day 1 of launch."]},{"l":"July 2022-August 2022","p":["Battle-test functionality and UI/UX of protocol and frontend.","Conduct a protocol audit through Quantstamp, which has a pre-arranged audit slotted for early July.","Publicly release the decentralized COEX application v0.1","Publicly release limit orders and stop-losses","Hire additional team members that are focused on user outreach, customer success, PR, design, and 2x solidity developers.","Launch our protocol on Ethereum, Polygon, Binance Smart Chain, and Cronos, with compatibility with DEX LP's including Uniswap v2/v3, Sushiswap, PancakeSwap, and Mad Meerkat Finance."]},{"i":"september-2022---november-2022","l":"September 2022 - November 2022","p":["Launch on additional EVM compatible L1's/L2's like Arbitrum, Near, Avalanche, Gnosis Chain, and Fantom, having compatibility with major DEX LP's on each chain.","Grow daily volume to a target of at least .01% of daily DEX market volume.","Adaptation of our MVP take-profit strategy is deployed on-chain for one-click automation.","Dollar-cost average, and grid trading strategies have started development / nearing completion of development.","Partnerships/integrations with low-code/no-code DAPP builders for extended reach and exposure."]},{"i":"december-2022-","l":"December 2022 +","p":["Non-custodial, trustless leveraged trading using fully on-chain validation and swap execution","Integration of custom TradingView signals to capture institutional/Quant funds that have developed their own internal strategies.","A fully on-chain & trustless price oracle that rewards COEX operators for calling the contract to store price history for multiple LP's, which benefits our current users by significantly reducing gas fees, and provides a verifiable on-chain price for other DAPP & DeFi developers.","Create an OTC platform for non-custodial, protocol-based transfers between two or more parties on all EVM chains.","As a note, the above timeline is subject to change depending on if research/development prove lesser/increased difficulty. We are striving for a much sooner timeframe than displayed above."]}]]