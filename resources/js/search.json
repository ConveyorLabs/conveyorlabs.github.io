[[{"i":"welcome-to-conveyor-finance","l":"Welcome to Conveyor Finance!"},{"i":"what-is-conveyor","l":"What is Conveyor?","p":["Conveyor is a collection of protocols to automate the management of digital cryptocurrency assets for funds, DAO's, whales, and the every day trader. Conveyor specializes in bringing features that are typically available on centralized exchanges (CEX), to the decentralized (DeFi) world. This includes stop losses, take profits and automated trading strategies through on-chain logic, enabling a completely trust-less and decentralized system."]},{"i":"who-made-it","l":"Who made it?","p":["Conveyor Labs is the for-profit organization that is responsible for the deployment, maintenance, upgrading, and migration of Smart Contracts within the Conveyor Finance ecosystem. Conveyor Labs is owned and operated by DEXbot, a registered LLC in the state of Wyoming, USA."]},{"l":"Overview","p":["There are two major parts to the Conveyor ecosystem. The Beacon application and the on-chain smart contract. These two components work together to identify market conditions, validate on-chain LP values, and execute specified swaps autonomously for users of the system. Conveyor takes the centralization or custodial requirements out of swapping tokens so that institutional traders, investment DAOs, token developer teams, and retail traders don’t need to constantly watch charts in anticipation of manually swapping when their desired market conditions are met."]}],[{"i":"100-decentralized","l":"100% Decentralized","p":["Decentralization is a crucial component in DeFi protocols in order to shift the control of a system from one main group (Conveyor Finance) to a system completely controlled by the general public. This gives more power to the individuals by offering a reproducible, predictable, and verifiable method to ensure funds are stored, transacted, and automated in the most efficient and safest way possible.","Conveyor Finance has zero centralized components throughout the process of storing, automating, or transacting tokens for users of our platform. We believe that the foundation of DeFi and any of its systems should not be controlled by any single entity or group of entities. Rather, it should be controlled and operated by the public through verifiable on-chain processes and execution."]}],[{"i":"100-non-custodial","l":"100% Non-Custodial"}],[{"i":"100-trustless","l":"100% Trustless"}],[{"l":"Fee Structure"},{"i":"base-fee-motivationoverview","l":"Base Fee Motivation/Overview","p":["The base user fee for autonomous trade execution by the beacon network is a dynamic price curve ranging from 0.5%-0.1% of the user's total transaction size. This fee is used to compensate the beacon for the execution of the transaction on the user's behalf. The base free shrinks at a proportional rate to the size of the transaction meaning smaller transactions will be closer to 0.5% while large transactions will dynamically approach 0.1%. This fee is chosen to facilitate a fair and thriving ecosystem that is overall beneficial to our userbase and the beacon network as a whole.","The base fee is used to compensate the beacon for executing the transactions on the user's behalf. The fee is modeled after a modified logistic function. Formally our fee structure is based on the calculation below:","​This function is mathematically capped at a .5% base fee, which dynamically decreases down to a minimum of 0.1%. The benefits of a constant function allow for higher gas optimizations by reducing conditionals in the contract by means of a stepper system. Fees are calculated by the post-swap value, rather than the pre-swap value. This is to account for possible tokenomic tax many DeFi tokens implement. A visual representation of the above formula can be seen below:","Additional benefits of the above curve compared to a direct line of decreasing fees are threefold: To maximize revenue for further development of current and future Conveyor protocols Provide an immediate incentive for users to transact higher valued trades for reduced fees Maintain a scalable, fair fee structure for institutional traders with higher USD value trades Examples of trade fees proportional to trade value can be seen below:","Column x references the USD value of the trade for each transaction while the f(x) column references the trade % in relation to its respective trade value.","The third column is a calculation of trade value * fee % to indicate the USD fee value associated with that trade Examples: A $1000 trade will have a 0.49% fee = ~$5 A $100,000 trade will have a 0.27% fee = ~$278 A $500,000 trade will have a 0.10% fee = ~$506 Beacon Reward A subtle, but integral aspect of our fee structure that was chosen with regards to overall protocol security is the beacon reward. The beacon reward is critically important when considering the possibility of flash loan attacks on the liquidity pools through which the beacon will be executing the transactions. Since the beacon will have visibility over the pending transactions in the queue and know the execution prices of these transactions, it is important to have a mechanistic way of protecting our user base from bad actors in the beacon network. We want to ensure a fair beacon reward for execution while concurrently guaranteeing our user's protection from the possibility of beacons executing profitable flash loan attacks on liquidity pools to manipulate the spot price to reap the rewards of execution. The beacon reward regarding the fee has been rigorously determined based on principles of conservation functions used in the liquidity pools our users will be interacting with. In order to determine the optimal beacon reward we formulated objective models on the price impact in liquidity pools based on transaction size, formally we determined the relationship between large swap transactions in correspondence with reserve size to determine a formal model of the potential exploitability of the Conveyor Contract from bad actor beacons on our user base. By analytically determining the relationship between swap size and price impact based on reserve size in the liquidity pools we are able to in real-time calculate the exact threshold amount that a beacon could receive in one execution reward that would make such an attack profitable on the basis of price manipulation in the liquidity pool. We ensure to our user base the unprofitability of such attacks by putting a hard cap on the beacon reward that can be received in one execution to facilitate an ecosystem that rewards playing by the rules. Beacon Reward vs. Conveyor Fee A user will always pay a fee based on the logistic curve above for each transaction completed. The fee a user pays is split between Conveyor Labs and the Beacon, and is broken down into a sub curve to know exactly which values should be paid to each party. For lower value TX's that have a higher-tiered fee ($100 trade for example), the ~ 0.5% fee is split 70% Conveyor Labs/ 30% Beacon For higher value TX's that have a lower-tiered fee ($500,000 trade for example), the ~ 0.1% fee is split 30% Conveyor Labs/ 70% Beacon This fee structure is ideal in that It's not only gas efficient, but lower value TX's offers Conveyor Labs a higher revenue stream while larger transactions offer larger rewards to the Beacon. This higher fee paid to the Beacon at higher values offers an increased financial incentive that strengthens the Beacon network and entices others to spin up a Beacon themselves for a chance of receiving a large reward. The Below graph illustrates the % of the user fee split between the Beacon operator who successfully confirms the transaction, and the Conveyor Labs fee","The above graph implements the following fee calculation reserved for Conveyor Labs (Orange)","and the fee structure reserved for the Beacon that successfully executed the transaction","When both the orange and green logistic curves are combined, they result in the purple line, which is the total fee the user pays once their order is executed. The benefit of implementing a crossover in reward allocation is that Beacons who confirm higher value transactions receive a higher proportion of the fee, while lower transactions benefit Conveyor Labs for future developments of the ecosystem. Custom beacon applications can be custom developed by software developers that only focus on higher-value transactions, while other Beacon applications can be focused towards smaller, more frequent trades. The end result is a fee structure where lower volume trades benefit the growth of Conveyor Labs -- and in turn its ecosystem -- while higher volume trades benefit the growth of the Beacon network responsible for automating the Conveyor ecosystem. The Desmos graph that plots the above functions and graphs can be seen via this Desmos link."]}],[{"l":"Gas Credits"},{"l":"Overview","p":["For a limit order to execute, the Beacon must call the fufillOrder() function on the Conveyor Limit Order contract. The Beacon spends the gas necessary to execute the order, but what happens if the cost to execute the order is higher than the profit from the limit order itself? This is where gas credits come in. Gas credits are an important concept to the Conveyor ecosystem, ensuring that Beacon runners are incentivized to execute limit orders as fast as possible."]},{"i":"what-are-gas-credits","l":"What Are Gas Credits?","p":["When a user first places an order, they are required to deposit gas credits to cover the cost the Beacon incurs when executing the order. Simply put, a user stores a small amount of ETH in the Limit Order contract to pay the Beacon for order execution. A user must add a minimum amount of gas credits, dependent on the current fair gas price at order placement to ensure order completion. In the case where gas price increases and the user does not have enough gas credits to cover order execution, the Beacon would not have an incentive to fulfill the order, thus risking order cancellation. It is recommended that a user deposits enough gas credits to account for gas price fluctuation. All gas credits are accounted for within the gasCredits mapping stored in the Limit Order contract, keeping track of how many gas credits a user has at any time. Users can add to their gas credit balance whenever they would like and can withdraw all gas credits as long as they have no pending orders. If a user has a pending order and wants to withdraw their credits, they must first cancel the order, and then they will be able to withdraw their full balance. It is recommended that a user deposits at least 3x the current gas credits requirement in order to sufficiently cover the potential for volatility in gas prices. With this is mind, a user should always over estimate the amount of gas credits you put in to ensure coverage. The conveyor front-end web interface will always keep track of the gas prices in real-time and notify the user if their current gas credit balance is below the threshold for execution, however the user must maintain their gas credit balance above the necessary threshold."]},{"l":"Gas Credits Strengthen The Ecosystem","p":["In order to maintain full decentralization and trustlessness within the Conveyor ecosystem, all values must be verified on-chain from execution price to gas price. This ensures that a Beacon runner can not input arbitrary values and keeps the system fully trustless. In order to execute this logic the Beacon must spend gas, incurring a cost to interact with the contract. In the event that the profit gained from order execution does not cover the cost of order execution, the Beacon would be losing money to interact with the contract. This is where gas credits come in. Gas credits ensure that the order execution is profitable for the Beacon, meaning that the Beacon is assured an incentive to call the contract to execute the order. Since there is an incentive to fulfill the order, Beacons will race and compete to execute the order which benefits the user by ensuring order fills as fast as possible.","Gas credits also help to reduce contract storage bloat, which makes reading and writing from the contract's storage more expensive. Since there is a minimum gas credit upon each order, this discourages contract spamming. Additionally, due to order cancelation upon a user's gas credits falling below the necessary threshold for Beacon execution, the contract storage is able to stay lean."]},{"i":"how-is-gas-price-estimated","l":"How Is Gas Price Estimated?","p":["When determining how many gas credits should be spent for order execution, gas price is verified on-chain to ensure a fair market price for execution. Initially Conveyor will be using ChainLink's Fast Gas Oracle, which updates gas price whenever gas fluctuates 25% from its current price, or after 7200 seconds has passed since the previous update.","While the initial gas oracle will be Chainlink, Conveyor will be developing a fully decentralized, trustless gas oracle with block to block precision, cheaper execution costs, and fees paid in Eth instead of a non-native token."]}],[{"l":"TheBeaconNetwork","p":["##The Beacon Network The Beacon is a decentralized, open-source, and highly optimized program that acts as the backbone of the Conveyor ecosystem. Each Beacon in the network monitors on-chain state changes in Conveyor contracts, receiving a reward for each transaction that it successfully completes. The Conveyor ecosystem is fully permissionless, meaning that Beacons compete amongst each other to execute transactions faster than their peers, which ensures that orders are guaranteed and executed as fast as possible. Through the Beacon network, Conveyor is able to enable trustless, fully decentralized contract automation for decentralized finance."]},{"l":"How it works","p":["The Beacon works by listening to on-chain state changes in the Conveyor Limit Order contract to keep track of all existing limit orders. Simultaneously, the Beacon listens to corresponding liquidity pools to keep track of price changes and know when to execute a limit order. All order execution is verified on-chain, meaning that a limit order will only execute when the price, order quantity, and all other necessary conditions are met on chain (conditions for order execution are discussed in detail in the Limit Orders section of the whitepaper). Beacons listen for events emitted from the Limit Order contract to update their local state whenever any order is placed, updated, canceled, or executed. When an active limit order hits its execution price, Beacons race to call the contract, with a reward going to the Beacon that successfully completes the transaction. This creates a financial incentive to support the Conveyor system, which ensures competition throughout the Beacon network. This competition creates a strong Beacon network, ensuring that limit orders are executed as fast as possible."]},{"l":"Accessibility","p":["The Beacon is fully open-sourced, compact, and extremely easy to install. Accessibility strengthens decentralization, and we wanted the Beacon to be accessible to anyone. While some protocols that offer automation either close source their off-chain logic or centralize their protocol so that only trusted nodes can call their contract, we decided to design the system in a way that the more Beacons there are, the stronger the network becomes. Downloading the Beacon is as easy as one command in the terminal and setup takes less than 5 minutes.","The Beacon is built in GoLang and is compatible with almost any operating system/architecture. Additionally, you can supply any RPC endpoint to the Beacon. One point to note is that the Beacon network is competitive, so having a computer with higher performance as well as a local node will give a Beacon operator the greatest advantage.","Running a Beacon Instructions on how to download/run a Beacon are coming soon."]}]]